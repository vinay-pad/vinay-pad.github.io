---
layout: post
title:  "Is engineering hiring art or science?"
tags: [management, hiring]
---

Running an engineering team is closer to art than science, even though the day-to-day work is based on engineering, which is rooted in science. If you agree with that statement, then the practices for running a team should be closer to art as well but isn't usually the case. The practice I focus on in this post is hiring, but it holds true even for others like project planning, estimation, career planning, etc.

To explain my point, let's consider making a movie or a tv show (overly simplified here, of course). Most of us agree that making a movie is an art. A movie needs a team of people with a diverse set of skills to make something that the audience enjoys watching and would pay for. Let's start drawing some parallels with this team and a software engineering team. (This analogy works even when building a new company).
*The producer is equivalent to the company or an investor in case of a new startup, i.e., the entity providing money and resources to run the show.
*The group consisting of the Screenwriter, Director, Production Designer, Director of Photography, Music Composer, and many others make up the crew, is equivalent to the roles of Engineering Manager, Product Manager, Product Designer, Customer Support, Sales, etc. in no particular order.
*The actors playing various roles make up the cast and are like the Software Engineers on the team. Just like the actors enact the scenes to make the final product, the software engineers implement the software used by the end user.

The skills required of the crew (Engineering Manager, Product Manager, Product Designer, Customer Support, Sales, etc in the software world) are pretty specific to the role, and the way to test for them has less overlap. 

The skills required for actors/software engineers however clearly have a lot more overlap. Surely an essential requirement for all actors hired for a movie is to enact something which involves a certain standard of expressions, emotions, delivering lines, etc. After this baseline of skills is tested, the crew would then have to look for additional specific skills that are presumably different for different roles. (Although good actors can play a variety of roles well in the same way as good software engineers can adapt to different roles). However, the process for the audition itself would be different based on the roles. It wouldn’t make sense for the crew to create a question bank from which they pick random hard/medium/easy questions to ask the candidates auditioning for various roles, would it? Then why do we do it when interviewing software engineers?

Developers need to satisfy a basic requirement of being able to translate a given business requirement into code that can produce an acceptable output for a given set of inputs under certain conditions. It's also reasonable to require a candidate to have the familiarity of certain practices like considering edge cases, testing, writing maintainable code, etc. After this baseline is tested, the additional skills that need testing should involve coming up with a creative interview process for each role. But instead, most companies treat the interview process like a manufacturing activity instead of a design activity.

It’s a lot easier for companies to conduct interviews from a question bank consisting of commonly asked questions from Leetcode, Topcoder, etc than to tailor interviews for specific roles. I don't blame them for sticking to such a strategy when the focus is on doubling the team at breakneck speed rather than being thoughtful about when and how to hire. Unfortunately, you are applying a mechanical process in hiring for roles that involve creativity. Such a process would make more sense for manufacturing companies where each employee would be following the exact same steps to get a job done, but in reality, software engineering is hardly that. The focus should be on the creativity of applying techniques to solve problems rather than pattern matching engineering concepts. So put some thought into designing your questions vs picking a textbook example. If pattern matching is all you need then why not just hire robots? It would be a lot cheaper to do so.

Based on the specific role a software engineer would be playing on the team some skills might be more important than others, just like an actor for different roles. For example, if the role requires them to work with cross-functional teams to identify problems, propose elegant solutions, write a design document, code it up, measure success metrics, etc then test for each of those skills.  It is in your team's best interests to come up with an interview process tailored to that instead of relying on a generic company-wide process. Have the candidate spend a day doing all of the above instead of two medium and one hard Leetcode questions and asking the textbook scalability design question. As a side note, not every engineer needs to know about consistent hashing if that's not important for the role you are hiring. It’s the ability to learn quickly is what matters. I almost laughed in a design interview recently where the interviewer asked me to explain this concept without tying it back to a specific scenario.

This kind of a creative interview process ensures that the company has engineers with a diverse set of skills versus the ones who could master the majority of questions from your question bank. I will end with a quote from a book I have been recently reading ([Richard Hamming's The Art of Doing Science and Engineering: Learning to Learn](https://www.amazon.com/Art-Doing-Science-Engineering-Learning/dp/1732265178/ref=pd_lpo_14_t_0/130-3275136-8575363?_encoding=UTF8&pd_rd_i=1732265178&pd_rd_r=96058951-3793-4e73-8f55-c28f6581c4e0&pd_rd_w=1C9qC&pd_rd_wg=sKnSB&pf_rd_p=7b36d496-f366-4631-94d3-61b87b52511b&pf_rd_r=K2FD088Z7JBXWR5PT4XB&psc=1&refRID=K2FD088Z7JBXWR5PT4XB), originally published in 1996 and republished recently) which nicely sums up my thoughts,

>Is programming closer to novel writing than classical engineering? I suggest yes! Given the problem of getting a man into outer space, both the Russians and the Americans did it pretty much the same way, all things considered, and allowing for some espionage. They were both limited by the same firm laws of physics. But give two novelists the problem of writing on "the greatness and misery of man," and you will probably get two very different novels. Give the same complex problem to two modern programmers and you will, I claim, get two rather different programs. Hence my belief that current programming practice is closer to novel writing than it is to engineering.

Hence, running an engineering team is closer to art than science. Start by making your hiring process more creative and less mechanical.
