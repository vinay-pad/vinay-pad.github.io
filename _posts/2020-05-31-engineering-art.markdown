I argue that running an engineering team is closer to art than science even though the day to day work itself is based on engineering which is rooted in science. This also means the practices for running a team should should be closer to art as well but isn't usually the case. The practice I focus in this post is hiring, but it holds true in my opinion even for others like Project Planning, Estimation, Career Planning etc.

In order to explain my point I want draw an analogy with making a movie (or a tv show). A huge _**disclaimer**_ that this is an extremely oversimplfied analogy for the purpose of this post and is from common knowledge about movie making that most of us have. Movie making is an extremely complex field and I don't claim to have any sort of authority to comment on the intricacies involved. Also, to simplify things a bit I focus on a team building software although the analogy would still hold for other types of teams.

Most of us agree that making a movie is defintely an art though there is cutting edge technology used in most movies now. A movie needs a team of people with a diverse set of skills in order to make something that the audience enjoys watching and would pay for. Let's start drawing some parallels between the roles in a movie crew & cast and an engineering team creating a product or a feature that it's users would pay for. (This analogy works even when build a new company).

* The producer is equivalent to the company or an investor in case of a new startup, i.e. the entity providing money and resources to run the show.
* The group consisting of the Screen writer, Director, Production designer, Director of photography, Music composer and many others make up the crew and equivalent to Engineering Manager, Product Manager, Product Designer, Customer Support, Sales etc in no particular order.
* Finally the actors playing various roles make up the cast and map to the software engineers on the team. Just like how actors enact the scenes to make the final product the software engineers implement the software used by the end user.

Just like the entire movie team (especially the cast and the crew) need to work together well in order to make a successful movie similarly the entire engineering team needs to work well together to produce a successful product. The skills needed for the crew are pretty specific to the role and the way to test for them has less overlap both in the movie and software world. 

Now lets focus on actors and software engineers since this post is about engineering hiring. 

The skills tested when hiring for a movie cast or engineers seem to have more of an overlap respectively than the crew. This is where the lines get blurred a bit. Surely a basic requirement for all actors hired for a movie is to be able to enact something which involves a certain standard of expressions, emotions, delivering lines etc. After this baseline of skills is tested the crew would then have to look for additional specific skills that are presumably different for different roles. For example, skills required to play the role of a businessman is different from that of a role of a pirate or a drug dealer. The crew wouldn't create a question bank from which they would pick random hard/medium/easy questions to ask the candidates auditioning for various roles would they?

Similarly all developers have a basic requirement of being able to translate a given requirement into code that can produce an acceptable output for a given set of inputs under certain conditions. It's also reasonable to require a candidate to have familiarity of certain practices like considering edge cases, testing, writing maintainable code etc. After this baseline is tested, the additional skills that need testing should involve coming up with a creative interview process for each role. But this is hardly the case in a majority of the tech companies. Most companies instead opt for a more rigid set of interviews that test the candidates's knowledge of certain algorithms and techniques that are usually available in popular interview prep sites like Leetcode, Topcoder, Careercup etc. In fact companies usually encourage candidates to use these sites to prepare for the interviews. 

Companies usually do this since it's not feasible for each team to come up with a their own interview process and it might be easier to just have a "question bank" available that make the interview logistics easier. I don't blame them sticking to such a strategy when the focus is more on "doubling" or "tripling" the engineering team at break neck speed rather than being thoughtful about when and how to hire. And this is a perfectly valid approach if your strategy is to hire people solely based on the ability to pattern match problems and ignore the other creative aspects that go into software engineering. Essentially you end up applying a mechanical process in hiring for roles that involve creativity. Such a process would make more sense for manufacturing companies where each employee would essentially be following the exact same steps to get a job done and you wouldn't need to test for anything else in an interview.  Whereas software engineering is more a creative process involving application of engineering concepts. The focus should be more on creativity of applying techniques to solve problems rather than pattern matching engineering concepts because you could then just hire robots if you just wanted to apply textbook concepts to problems. 

Based on the specific role a software engineer would be playing on the team some set of skills might be more important others, just like an actor would need different skills for different roles. For example, if the role requires them to be able to work with cross functional teams to identify problems, propose elegant solutions, write a design document, gather feedback, fine-tune the document, code it up, measure success metrics etc then you should be testing for each of those skills versus just asking textbook problems. And it is in your team's best interests to come up with an interview process to test these instead of relying on a generic company wide process. Have the candidate spending a day doing all of the above steps instead of  2 medium + 1 hard Leetcode questions and asking the standard scalability design question when eventually the role wouldn't deal with scalability. As a side note, not every engineer needs to know about consistent hashing if that's not important for the role you are hiring. I almost laughed in a design interview recently where the interviewer asked me to explain this concept without tying it back to a specific scenario.

This kind of team and role specific interview process also ensures that eventually the entire company has engineers who have a diverse set of skills versus a bunch of folks who only ended up joining the company because they could master the majority of questions from your question bank. I will end with a quote from a book I have been recently reading ([Richard Hamming's The Art of Doing Science and Engineering: Learning to Learn](https://www.amazon.com/Art-Doing-Science-Engineering-Learning/dp/1732265178/ref=pd_lpo_14_t_0/130-3275136-8575363?_encoding=UTF8&pd_rd_i=1732265178&pd_rd_r=96058951-3793-4e73-8f55-c28f6581c4e0&pd_rd_w=1C9qC&pd_rd_wg=sKnSB&pf_rd_p=7b36d496-f366-4631-94d3-61b87b52511b&pf_rd_r=K2FD088Z7JBXWR5PT4XB&psc=1&refRID=K2FD088Z7JBXWR5PT4XB). Originally published in 1996 and republished recently) which nicely sums up my thoughts,

>Is programming closer to novel writing than classical engineering? I suggest yes! Given the problem of getting a man into outer space, both the Russians and the Americans did it pretty much the same way, all things considered, and allowing for some espionage. They were both limited by the same firm laws of physics. But give two novelists the problem of writing on "the greatness and misery of man," and you will probably get two very different novels. Give the same complex problem to two modern  programmers and you will, I claim, get two rather different programs. Hence my belief that current programming practice is closer to novel writing than it is to engineering.

Hence, running an engineering team is closer to art than science. Start by making your hiring process more creative and less mechanical.
